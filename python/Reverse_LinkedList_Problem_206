# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if (not head):
            return head
        else:
            preNode = None
            currentNode = head
            while(currentNode):
                nextNode = currentNode.next
            # swaping nextNode to preNode position, so pointer change the direction
                currentNode.next = preNode
            # moving the flow forward
                preNode = currentNode
                currentNode = nextNode
            
            return preNode
            
############################## break down method ############################## 
        if (not head):
            return head
        else:
# count the length of Linked List 
            l1 = head
            count = 0
            while(l1):
                l1=l1.next
                count = count+1
# store all the values from Linked list        
            reverseValue = []
            l2 = head
            for i in range(count):
                reverseValue.append(l2.val)
                l2 = l2.next
# create reverse ListnNode            
            reverseNode = ListNode(reverseValue[count-1])
            start = reverseNode # need to store the previous value, otherwise every step in the for-loop only stay in the current value.
            for i in range(len(reverseValue)):
                if count-(i+2)>=0:
                    start.next = ListNode(reverseValue[count-(i+2)])
                    start = start.next
                else:
                    start.next = None      
            return reverseNode

    
               
